#include "game.h"
#include "_intrinsics.h"


internal void
GameSoundOutput(game_state *GameState, game_sound_output_buffer *SoundBuffer, int ToneHz)
{
    int16 ToneVolume = 3000;
    int WavePeriod = SoundBuffer->SampleFreq/ToneHz;
    
    int16 *SampleOut = SoundBuffer->Samples;    
    for (int SampleIndex = 0; SampleIndex < SoundBuffer->SampleCount;
         ++SampleIndex)
    {
#if 0
        real32 SineValue = sinf(GameState->tSine);
        int16 SampleValue = (int16)(SineValue * ToneVolume);
#else
        int16 SampleValue = 0;
#endif
        *SampleOut++ = SampleValue; //LEFT
        *SampleOut++ = SampleValue; //RIGHT
#if 0
        GameState->tSine  += 2.0f*Pi32*1.0f / (real32)WavePeriod;
        if(GameState->tSine > 2.0f*Pi32)
        {
            GameState->tSine -= 2.0f*Pi32;
        }
#endif
    } 
}

/* NOTE: Convention:

   Pixel Grid:
   0 1 2 3 4 5
   _ _ _ _ _ _       
0 |_|_|_|_|_|_|   When we talking about fill from (MinX; MinY) to (MaxX; MaxY)
1 |_|_|_|_|_|_|   we mind that rectangle will be filled:
2 |_|x|x|x|x|_|   [1,2] -> (5,6) i.e 
3 |_|x|x|x|x|_|   inclusively for MinValues and exclusively for MaxValues
4 |_|x|x|x|x|_|   
5 |_|x|x|x|x|_|   
6 |_|_|_|_|_|_|   
7 |_|_|_|_|_|_|

*/

internal void
DrawRectangle(game_offscreen_buffer *Buffer,
              real32 RealMinX, real32 RealMinY,
              real32 RealMaxX, real32 RealMaxY,
              real32 R, real32 G, real32 B)
{
    int32  MinX = RoundReal32ToInt32(RealMinX);
    int32  MinY = RoundReal32ToInt32(RealMinY);
    int32  MaxX = RoundReal32ToInt32(RealMaxX);
    int32  MaxY = RoundReal32ToInt32(RealMaxY);



    uint32 Color = ((RoundReal32ToUInt32(255.0f * R) << 16) |
                    (RoundReal32ToUInt32(255.0f * G) << 8) | 
                    (RoundReal32ToUInt32(255.0f * B)));

    if(MinX < 0)
    {
        MinX = 0;
    }

    if(MinY < 0)
    {
        MinY = 0;
    }

    if(MaxX > Buffer->Width)
    {
        MaxX = Buffer->Width;
    }

    if(MaxY > Buffer->Height)
    {
        MaxY = Buffer->Height;
    }
    uint8 *EndOfBuffer = (uint8 *)Buffer->Memory +
        (Buffer->Height * Buffer->Width) * Buffer->BytesPerPixel;
    
    //uint32 Color = 0xFFFFFFFF;
    
    uint8 *Row = ((uint8 *)Buffer->Memory +
                  MinX*Buffer->BytesPerPixel +
                  MinY*Buffer->Pitch);
    for(int Y = MinY; Y < MaxY; Y++)
    {
        uint32 *Pixel = (uint32 *)Row; 
        for(int X = MinX; X < MaxX; X++)
        {
            *Pixel++ = Color;
        }
        Row += Buffer->Pitch;
    }
}

inline uint32
GetTile(world *World, tile_chunk *TileChunk, uint32 TileX, uint32 TileY )
{
    Assert(TileChunk);
    Assert(TileX < World->ChunkDim);
    Assert(TileY < World->ChunkDim);
           
    uint32 Value = TileChunk->Tiles[TileY*World->ChunkDim + TileX];
    return(Value); 
}

inline tile_chunk *
GetTileChunk(world * World, int32 TilechunkX, int32 TilechunkY )
{
    tile_chunk *Tilechunk = 0;
    if((TilechunkX >= 0) && (TilechunkX < World->TileChunkX) &&
       (TilechunkY >= 0) && (TilechunkY < World->TileChunkY))
    {
        Tilechunk = &World->TileChunks[TilechunkY*World->TileChunkX + TilechunkX];
        return(Tilechunk);
    }
    return(Tilechunk);
}

internal bool32
IsTileEmpty(world *World, tile_chunk *Tilechunk, uint32 TestTileX, uint32 TestTileY)
{
    bool32 IsEmpty = false;

    if(Tilechunk)
    {
        uint32 TilechunkValue = GetTile(World, Tilechunk, TestTileX, TestTileY); 
        IsEmpty = (TilechunkValue == 0);
    }
    
    return(IsEmpty);
}


inline void
ReCanonicalizeizeCoord(world *World, uint32 *Tile, real32 *TileRel)
{
    int32 TileOffset = FloorReal32ToInt32((*TileRel)/World->TileSideInMeters);

    //NOTE: world is toroidal (if u step off on end u will come back to the other) 

    *Tile += TileOffset;
    *TileRel -= TileOffset*World->TileSideInMeters;

    Assert(*TileRel >= 0);
    Assert(*TileRel < World->TileSideInMeters);

}

// NOTE: this is inline function so we don't need to pass out large struct via
// pointer
inline world_position
ReCanonicalizePosition(world *World, world_position Pos)
{
    world_position Result = Pos;

    ReCanonicalizeizeCoord(World, &Result.AbsTileX, &Result.TileRelX);
    ReCanonicalizeizeCoord(World, &Result.AbsTileY, &Result.TileRelY);

    return(Result);
}

inline tile_chunk_position
GetChunkPositionFor(world *World, uint32 AbsTileX, uint32 AbsTileY)
{

    tile_chunk_position Result;

    Result.TileChunkX = AbsTileX >> World->ChunkShift;
    Result.TileChunkY = AbsTileY >> World->ChunkShift;
    Result.RelTileX = AbsTileX & World->ChunkMask;
    Result.RelTileY = AbsTileY & World->ChunkMask;

    return(Result);
        
}

internal bool32
IsWorldTileEmpty(world *World, world_position CanPos)
{
    bool32 IsEmpty = false;
    
    tile_chunk_position ChunkPos = GetChunkPositionFor(World, CanPos.AbsTileX, CanPos.AbsTileY);
   
    tile_chunk *Tilechunk = GetTileChunk(World, ChunkPos.TileChunkX, ChunkPos.TileChunkY);
    IsEmpty = IsTileEmpty(World, Tilechunk, ChunkPos.RelTileX, ChunkPos.RelTileY);

    return(IsEmpty);
}

/*
internal bool32
IsWorldPointEmpty(world *World, int32 TilechunkX, int32 TilechunkY, real32 TestX, real32 TestY)
{
    bool32 IsEmpty = false;
    tile_chunk *Tilechunk = GetTilechunk(World, TilechunkX, TilechunkY);
    if(Tilechunk)
    {
        int32 PlayerTileX = FloorReal32ToInt32((TestX - World->OuterSpaceX)/World->TileSideInMeters);
        int32 PlayerTileY = FloorReal32ToInt32((TestY - World->OuterSpaceY)/World->TileSideInMeters);

        if((PlayerTileX >= 0) && (PlayerTileX < World->DimX) &&
           (PlayerTileY >= 0) && (PlayerTileY < World->DimY))
        {
            uint32 TilechunkValue = GetTile(World, Tilechunk, PlayerTileX, PlayerTileY); 
            IsEmpty = (TilechunkValue == 0);
        }
    }
    
    return(IsEmpty);
}
*/

// NOTE: look at the macro in game.h
// NOTE: extern "C" means that we don't want any name mangling in map file
extern "C" GAME_UPDATE_AND_RENDER(GameUpdateAndRender)
{

    Assert(sizeof(game_state) <= Memory->PermanentStorageSize);
    game_state *GameState = (game_state *)Memory->PermanentStorage;
    if(!Memory->IsInitialized)
    {
        Memory->IsInitialized = true;
        GameState->PlayerPosition.AbsTileX = 3;
        GameState->PlayerPosition.AbsTileY = 3;
        GameState->PlayerPosition.TileRelX = 0.0f;
        GameState->PlayerPosition.TileRelY = 0.0f;
        
        
        
    }

#define TILE_MAP_SIZE_X 256
#define TILE_MAP_SIZE_Y 256

     uint32 Tiles[TILE_MAP_SIZE_Y][TILE_MAP_SIZE_X] =
    {
        {1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1, 1},
        {1, 0, 0, 0,  0, 0, 0, 0,  0, 1, 0, 0,  0, 0, 0, 0, 1,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1},
        {1, 0, 0, 0,  0, 0, 0, 0,  0, 1, 0, 0,  0, 0, 0, 0, 1,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1},
        {1, 0, 0, 0,  0, 0, 0, 0,  1, 1, 1, 0,  0, 0, 0, 0, 1,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1},
        {1, 0, 0, 1,  0, 0, 0, 0,  0, 1, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1},
        {1, 0, 1, 1,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1},
        {1, 0, 0, 1,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1},
        {1, 0, 0, 1,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1},
        {1, 1, 1, 1,  1, 1, 1, 1,  0, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  0, 1, 1, 1,  1, 1, 1, 1, 1},
        {1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  0, 1, 1, 1,  1, 1, 1, 1, 1},
        {1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1},
        {1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1},
        {1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1},
        {1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1},
        {1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1},
        {1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1},
        {1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 1},
        {1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1, 1},
    };       

    world World = {};
    tile_chunk TileChunk = {};
    TileChunk.Tiles = (uint32 *)Tiles;
    World.ChunkDim = 256;
    
    World.TileSideInPixels = 55;
    World.TileSideInMeters = 1.4f;
    World.MetersToPixels = World.TileSideInPixels/World.TileSideInMeters;

    //NOTE: this is set for using in virtual tile memory system 256x256
    //(X->8bit, Y->8bit)
    World.ChunkShift = 8;
    World.ChunkMask = 0xFF;


    World.TileChunkX = 1;
    World.TileChunkY = 1;
    World.TileChunks = &TileChunk;

    real32 LeftLowX  = -(real32)World.TileSideInPixels/5;
    real32 LeftLowY = (real32)Buffer->Height;

    real32 PlayerR = 0.0f;
    real32 PlayerG = 1.0f;
    real32 PlayerB = 1.0f;

    real32 PlayerWidth = 0.75f*World.TileSideInMeters;
    real32 PlayerHeight = (real32)World.TileSideInMeters;

    for(int ControllerIndex = 0; ControllerIndex < ArrayCount(Input->Controllers);
        ControllerIndex++)
    {
        game_controller_input *Controller = GetController(Input, ControllerIndex);
        if(Controller->IsAnalog)
        {
        }
        else
        {
            // TODO: bug with movement suppose culprit platform layer or bit
            // rounding
            real32 PlayerDeltaX = 0.0f;
            real32 PlayerDeltaY = 0.0f;
            if(Controller->MoveUp.EndedDown)
            {
                PlayerDeltaY += 1.0f;
            }
            if(Controller->MoveDown.EndedDown)
            {
                PlayerDeltaY -= 1.0f;
            }
            if(Controller->MoveLeft.EndedDown)
            {
                PlayerDeltaX -= 1.0f;
            }
            if(Controller->MoveRight.EndedDown)
            {
                PlayerDeltaX += 1.0f;
            }

            PlayerDeltaX *= 2.5f;
            PlayerDeltaY *= 2.5f;

            // TODO: fix the diagonal movement (implement vectors)
            world_position NewPlayerPosition = GameState->PlayerPosition;
            NewPlayerPosition.TileRelX += Input->dtOverFrame*PlayerDeltaX;
            NewPlayerPosition.TileRelY += Input->dtOverFrame*PlayerDeltaY;
            NewPlayerPosition = ReCanonicalizePosition(&World, NewPlayerPosition);
            
            world_position PlayerLeft = NewPlayerPosition;
            PlayerLeft.TileRelX -= 0.5f*PlayerWidth;
            PlayerLeft = ReCanonicalizePosition(&World, PlayerLeft);

            world_position PlayerRight = NewPlayerPosition;
            PlayerRight.TileRelX += 0.5f*PlayerWidth;
            PlayerRight = ReCanonicalizePosition(&World, PlayerRight);



            if(IsWorldTileEmpty(&World,NewPlayerPosition)&&
               IsWorldTileEmpty(&World,PlayerRight)&&
               IsWorldTileEmpty(&World,PlayerLeft))
            {
                GameState->PlayerPosition = NewPlayerPosition;
            }

        }
    }
    DrawRectangle(Buffer, 0.0f, 0.0f,
                  (real32)Buffer->Width ,(real32)Buffer->Height,
                  1.0f, 0.0f , 1.0f);


    
    for(uint32 Row = 0; Row < 9; Row++)
    {
        for(uint32 Column = 0; Column < 17; Column++)
        {
            real32 Gray = 0.5f;
            uint32 TileID = GetTile(&World, &TileChunk, Column, Row);
            if (TileID == 1)
            {
                Gray = 1.0f;
            }

            if((Column == GameState->PlayerPosition.AbsTileX) && (Row == GameState->PlayerPosition.AbsTileY))
            {
                Gray = 0.0f;
            }

            real32 MinX = LeftLowX + ((real32)Column) * World.TileSideInPixels;
            real32 MinY = LeftLowY - ((real32)Row)  * World.TileSideInPixels;
            real32 MaxX = MinX + World.TileSideInPixels;
            real32 MaxY = MinY - World.TileSideInPixels;
            
            DrawRectangle(Buffer, MinX, MaxY, MaxX, MinY, Gray, Gray, Gray);
        }
    }

    real32 PlayerLeftDot = LeftLowX +
        GameState->PlayerPosition.AbsTileX*World.TileSideInMeters*World.MetersToPixels +
        GameState->PlayerPosition.TileRelX*World.MetersToPixels - 0.5f*PlayerWidth*World.MetersToPixels;
    
    real32 PlayerTopDot = LeftLowY -
        GameState->PlayerPosition.AbsTileY*World.TileSideInMeters*World.MetersToPixels -
        GameState->PlayerPosition.TileRelY*World.MetersToPixels - PlayerHeight*World.MetersToPixels;

    DrawRectangle(Buffer, PlayerLeftDot, PlayerTopDot,
                  (PlayerLeftDot+PlayerWidth*World.MetersToPixels),
                  (PlayerTopDot+PlayerHeight*World.MetersToPixels),
                  PlayerR, PlayerG, PlayerB);

    real32 PlayerGroundDotX = LeftLowX +
        GameState->PlayerPosition.AbsTileX*World.TileSideInMeters*World.MetersToPixels +
        GameState->PlayerPosition.TileRelX*World.MetersToPixels;
    
    real32 PlayerGroundDotY = LeftLowY -
        GameState->PlayerPosition.AbsTileY*World.TileSideInMeters*World.MetersToPixels -
        GameState->PlayerPosition.TileRelY*World.MetersToPixels;
    
    DrawRectangle(Buffer, PlayerGroundDotX-3, PlayerGroundDotY-3,
                  (PlayerGroundDotX+3), (PlayerGroundDotY+3),
                  1, 0, 0);

}


// NOTE: look at the macro in game.h
extern "C" GAME_GET_SOUND_SAMPLES(GameGetSoundSamples)
{
    game_state *GameState = (game_state *)Memory->PermanentStorage;
    GameSoundOutput(GameState, SoundBuffer, 45);    
}




//---------------------obsolete code---------------------------------------------

/*
internal void
DEBUGRenderWeirdGradient(game_offscreen_buffer *Buffer ,int Xoffset, int Yoffset)
{
    // TODO: there is a place where we should test what will be better
    // passing by pointer or value, so we gonna see what the optimizer
    // really does in this case
#if 1
    uint8 *Row = (uint8 *)Buffer->Memory;
    // The carret that allow as to switch between the rows
    
    for(int Y = 0; Y < Buffer->Height; Y++)
    {
        uint32 *Pixel = (uint32 *)Row;
        for( int X = 0; X < Buffer->Width; X++)
        {
            //                                         0    1    2    3 
            // Structure of pixel in Windows          |xx| |RR| |GG| |BB|
            // of pixel in machine memory:            |BB| |GG| |RR| |xx|
            // all this shit bcoz of the LITTLE ENDIAN architecture
            uint8 BB = (uint8)(X + Xoffset);
            uint8 GG = (uint8)(Y + Yoffset);
            uint8 RR = 0;// (uint8)(X + Y + Xoffset - Yoffset);
            uint8 xx = 0;
            
            // memory:    BB GG RR xx
            // register:  xx RR GG BB
            *Pixel++ = (xx | (RR<<16) |( GG<<16) | (BB));
        }
        Row += Buffer->Pitch;
    }
#endif
}
*/


